#! /usr/bin/env python3

import os
import argparse
import random
import fpdf
import PIL
import math

VERSION = '1.0'
 
# page layout
# +---------------------------------+
# |  .............................  |
# |                                 |
# |                                 |
# |       H E A D E R               |
# |                                 |
# |                                 |
# |  .............................  |
# |  .                           .  |
# |  .                           .  |
# |  .                           .  |
# |  .                           .  |
# |  .   I M A G E S             .  |
# |  .                           .  |
# |  .                           .  |
# |  .                           .  |
# |  .............................  |
# |                                 |
# +---------------------------------+

MARGIN_LEFT = 10
MARGIN_RIGHT = MARGIN_LEFT
MARGIN_TOP = 10
MARGIN_BOTTOM = MARGIN_TOP
HEADER_HEIGHT = 60
MARGIN_IMGS_TOP = MARGIN_TOP + HEADER_HEIGHT
PAGE_FORMAT_PORTRAIT = 'portrait'
PAGE_FORMAT_LANDSCAPE = 'landscape'
PAGE_SIZES_MM = { 'A4': { PAGE_FORMAT_PORTRAIT: (210, 297),
                          PAGE_FORMAT_LANDSCAPE: (297, 210) },
                  'A3': { PAGE_FORMAT_PORTRAIT: (297, 420),
                          PAGE_FORMAT_LANDSCAPE: (420, 297) }
                 }
PADDING_IMG_Y = 10
PADDING_IMG_X = 10


def log(*args):
    msg = ''
    for arg in args:
        if len(msg) != 0: msg += ' '
        msg += '%s' % (arg)
    print(msg)



def add_image(pdf, image_path, x=None, y=None):
    pdf.image(image_path, x=x, y=y, w=30)
    #pdf.set_font("Arial", size=12)
    #pdf.ln(85)  # move 85 down
    #pdf.cell(200, 10, txt="{}".format(image_path), ln=1)


def parse_command_line():
    parser = argparse.ArgumentParser(description=main.__doc__, prog='mixim')
    parser.add_argument('files', nargs='+', help='source image files or directories containing source image files')
    parser.add_argument('-V', '--version',
                        help='print version and exit', action='version',
                        version='%(prog)s ' + VERSION)
    parser.add_argument('-v', '--verbose', action='store_true', help='be more verbose')
    parser.add_argument('-o', '--output', help='name of the generated PDF', default='output.pdf')
    parser.add_argument('-f', '--format', help='format (A4 or A3)')
    parser.add_argument('--images-per-page', type=int, help='number of images per page', default=36)
    parser.add_argument('--pages', type=int, help='number of pages', default=1)
    parser.add_argument('--target-ratio', type=int, help='ratio (%%) of occurrence of the target image', default=20)
    parser.add_argument('--orientation', choices=[PAGE_FORMAT_PORTRAIT, PAGE_FORMAT_LANDSCAPE],
                        help='Orientation of the page (portrait or landscape)', default=PAGE_FORMAT_PORTRAIT)
    parser.add_argument('--page-format', choices=['A3', 'A4'], help='Page format (A3 or A4)', default='A4')

    args = parser.parse_args()
    return args


def get_src_files(items):
    result = []
    for item in items:
        if os.path.isdir(item):
            for r, d, f in os.walk(item):
                subfiles = [os.path.join(r, subf) for subf in f]
                result += subfiles
        else:
            result.append(item)

    return set(result) # remove duplicates


def init_pdf(orientation, page_format):
    pdf = fpdf.FPDF(orientation=orientation, format=page_format)
    return pdf


def set_target_img(pdf, img):
    pdf.image(img, x=100, y=MARGIN_TOP, w=30, h=30)


def generate_page(pdf, src_files, one_img_w, one_img_h, n_horizontal):

    # display on a grid
    x0 = MARGIN_LEFT
    y0 = MARGIN_IMGS_TOP
    x = x0
    y = y0
    count_on_line = 0
    for f in src_files:
        pdf.image(f, x=x, y=y, w=one_img_w, h=one_img_h)
        count_on_line += 1
        if count_on_line == n_horizontal:
            # go to next line
            y += one_img_h + PADDING_IMG_Y
            x = x0
            count_on_line = 0
        else:
            x += one_img_w + PADDING_IMG_X


def chose_target_item(file_set):
    files = list(file_set)
    return random.choice(files)


def compute_random_list(item_set, size, target_item, target_ratio):
    """Create a list of given size, where the target item is present with the given ratio (%)
    """

    if len(item_set) <= 1:
        raise Exception('len(item_set) <= 1')

    items = list(item_set)

    # First initialize the result with the number of target items
    n_target_item = size * target_ratio // 100
    if n_target_item == 0: n_target_item = 1
    if n_target_item > 100: n_target_item = 100
    result = [ target_item ] * n_target_item

    # Now complete the list with the other items
    while len(result) < size:
        random_item = random.choice(items)
        if random_item == target_item: continue # do not take this one
        result.append(random_item)

    random.shuffle(result)

    return result


def get_aspect_ratio(image_file):
    """Return a tuple (WIDTH, HEIGHT) giving the aspect ratio of the image

    If the image width is more then its height, then WIDTH=1 and HEIGHT <= 1.
    If the image height is more then its width, then HEIGHT=1 and WIDTH <= 1.
    """

    img = PIL.Image.open(image_file)
    width, height = img.size
    if width >= height:
        w = 1
        h = height / width
    else:
        h = 1
        w = width / height

    return w, h


def compute_img_size(images, images_per_page, page_format, page_orientation):
    """Compute the size that must have the images to fit in the given page size

    Images are to be displayed in squares.
    """
    if len(images) == 0:
        raise Exception('Empty file list')

    w_ref, h_ref = 0, 0
    for img in images:
        w, h = get_aspect_ratio(img)
        #log('aspect_ratio: %f, %f' % (w, h))
        if w > w_ref: w_ref = w
        if h > h_ref: h_ref = h

    img_aspect_ratio = w_ref / h_ref
    # now compute the max size
    page_width, page_height = PAGE_SIZES_MM[page_format][page_orientation]
    image_box_width = page_width - MARGIN_RIGHT - MARGIN_LEFT
    image_box_height = page_height - MARGIN_BOTTOM - MARGIN_IMGS_TOP
    log('image_box_width=', image_box_width, ', image_box_height=', image_box_height)
    img_box_surface = image_box_width * image_box_height
    one_img_surface = img_box_surface / images_per_page
    log('images_per_page=', images_per_page)
    one_img_w = math.sqrt(one_img_surface * img_aspect_ratio) - PADDING_IMG_X
    one_img_h = math.sqrt(one_img_surface / img_aspect_ratio) - PADDING_IMG_Y

    # reduce size by 15% as the distribution on the surface is not optimal (some space is wasted)
    one_img_w *= 0.85
    one_img_h *= 0.85

    log('one_img_w=', one_img_w, ', one_img_h=', one_img_h)
    n_horizontal = image_box_width // (one_img_w + PADDING_IMG_X)

    return one_img_w, one_img_h, n_horizontal


def main():

    args = parse_command_line()

    src_files = get_src_files(args.files)

    pdf = init_pdf(args.orientation, args.page_format)
    for page in range(args.pages):
        log('page %d' % page)
        pdf.add_page()
        target_img = chose_target_item(src_files)
        set_target_img(pdf, target_img)
        files = compute_random_list(src_files, args.images_per_page, target_img, args.target_ratio)

        one_img_w, one_img_h, n_horizontal = compute_img_size(files, args.images_per_page,
                                                              args.page_format, args.orientation)

        generate_page(pdf, files, one_img_w, one_img_h, n_horizontal)

    pdf.output(args.output)

 
if __name__ == '__main__':
    main()
