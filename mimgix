#! /usr/bin/env python3

import os
import argparse
import random
import fpdf

VERSION = '1.0'
 
def log(*args):
    msg = ''
    for arg in args:
        if len(msg) != 0: msg += ' '
        msg += '%s' % (arg)
    print(msg)



def add_image(pdf, image_path, x=None, y=None):
    pdf.image(image_path, x=x, y=y, w=30)
    #pdf.set_font("Arial", size=12)
    #pdf.ln(85)  # move 85 down
    #pdf.cell(200, 10, txt="{}".format(image_path), ln=1)


def parse_command_line():
    parser = argparse.ArgumentParser(description=main.__doc__, prog='mixim')
    parser.add_argument('files', nargs='+', help='source image files or directories containing source image files')
    parser.add_argument('-V', '--version',
                        help='print version and exit', action='version',
                        version='%(prog)s ' + VERSION)
    parser.add_argument('-v', '--verbose', action='store_true', help='be more verbose')
    parser.add_argument('-o', '--output', help='name of the generated PDF', default='output.pdf')
    parser.add_argument('-f', '--format', help='format (A4 or A3)')
    parser.add_argument('--images-per-page', type=int, help='number of images per page', default=36)
    parser.add_argument('--pages', type=int, help='number of pages', default=1)
    parser.add_argument('--target-ratio', type=int, help='ratio (%%) of occurrence of the target image', default=20)
    parser.add_argument('--orientation', choices=['Landscape', 'Portrait'], help='Landscape or Portrait', default='Portrait')
    parser.add_argument('--page-format', choices=['A3', 'A4'], help='A3 or A4', default='A4')

    args = parser.parse_args()
    return args


def get_src_files(items):
    result = []
    for item in items:
        if os.path.isdir(item):
            for r, d, f in os.walk(item):
                subfiles = [os.path.join(r, subf) for subf in f]
                result += subfiles
        else:
            result.append(item)

    return set(result) # remove duplicates


LEFT_MARGIN = 10
TOP_MARGIN = 10
TOP_MARGIN_IMGS = 50


def init_pdf(orientation, page_format):
    pdf = fpdf.FPDF(orientation=orientation, format=page_format)
    return pdf


def set_target_img(pdf, img):
    pdf.image(img, x=100, y=TOP_MARGIN, w=30, h=30)


def generate_page(pdf, src_files):

    # diaply on a grid 30x30 mmm2
    x0 = LEFT_MARGIN
    y0 = TOP_MARGIN_IMGS
    x = x0
    y = y0
    for f in src_files:
        pdf.image(f, x=x, y=y, w=30, h=30)
        x += 30
        if x > 170: # for portrait
            x = x0
            y += 30
            if y > 270:
                log('y=%d too high to fit in page' % y)



def chose_target_item(file_set):
    files = list(file_set)
    return random.choice(files)


def compute_random_list(item_set, size, target_item, target_ratio):
    """Create a list of given size, where the target item is present with the given ratio (%)
    """

    if len(item_set) <= 1:
        raise Exception('len(item_set) <= 1')

    items = list(item_set)

    # First initialize the result with the number of target items
    n_target_item = size * target_ratio // 100
    if n_target_item == 0: n_target_item = 1
    if n_target_item > 100: n_target_item = 100
    result = [ target_item ] * n_target_item

    # Now complete the list with the other items
    while len(result) < size:
        random_item = random.choice(items)
        if random_item == target_item: continue # do not take this one
        result.append(random_item)

    random.shuffle(result)

    return result


def compute_img_size(files, page_format, args.images_per_page, args.orientation):
    """Compute the size that must have the images to fit in the given page size
    """
    pass


def main():

    args = parse_command_line()

    src_files = get_src_files(args.files)

    pdf = init_pdf(args.orientation, args.page_format)
    for page in range(args.pages):
        log('page %d' % page)
        pdf.add_page()
        target_img = chose_target_item(src_files)
        set_target_img(pdf, target_img)
        files = compute_random_list(src_files, args.images_per_page, target_img, args.target_ratio)

        img_size = compute_img_size(files)

        generate_page(pdf, files)

    pdf.output(args.output)

 
if __name__ == '__main__':
    main()
