#! /usr/bin/env python3

import os
import sys
import locale
import subprocess
import platform
import tkinter as tk
import tkinter.filedialog

VERSION = '1.0'

# Internationalisation
def _(text):
    try:
        lang = locale.getdefaultlocale()[0][0:2]
        text = TEXT[lang][text]
    except:
        pass

    return text
 
TEXT = { 'fr':
        {'Page format':'Format de page',
         'Page orientation':'Orientation de la page',
         'landscape':'paysage',
         'Number of pages':'Nombre de pages',
         'Image layout':'Placement des images',
         'grid':'grille',
         'random':'aléatoire',
         'Images per page':'Images par page',
         'Image directory':'Répertoire d\'images',
         'Target ratio (%)':'Ratio de la cible (%)',
         'Instruction':'Consigne',
         'Generate PDF':'Générer un PDF',
         'Exit':'Quitter',
         'cancelled':'annulé',
         'Choose a file name for the generated PDF':'Choisissez un nom de fichier pour le PDF',
         'ok':'ok',
         'error':'erreur',
         '':''}
       }


def open_file_with_default_application(filepath):
    system = platform.system()
    if system == 'Darwin': # macOS
        subprocess.call(['open', filepath])
    elif system == 'Windows':
        os.startfile(filepath)
    else: # Linux variants
        subprocess.call(['xdg-open', filepath])

WIDTH_LABEL = '20'

def create_choice(parent, label_text, selected, *values):
    """Create a Frame with a label and an OptionMenu
    """
    frame = tk.Frame(parent)
    label_text += ':'
    label = tk.Label(frame, text=label_text, width=WIDTH_LABEL, anchor=tk.E)
    label.pack(side='left')
    frame.value = tk.StringVar()
    frame.value.set(selected)
    frame.option_menu = tk.OptionMenu(frame, frame.value, *values)
    frame.option_menu.pack(side='left')
    frame.pack(side='top', anchor=tk.W)
    return frame


def validate_percent(text):
    try:
        v = int(text)
        if v < 0: return False
        if v > 100: return False
        return True
    except:
        return False


def validate_page_num(text):
    try:
        v = int(text)
        if v <= 0: return False
        return True
    except:
        return False


def create_input(parent, label_text, validate_func=None, size=5):
    """Create a Frame with a label and an OptionMenu
    """
    frame = tk.Frame(parent)
    label_text += ':'
    label = tk.Label(frame, text=label_text, width=WIDTH_LABEL, anchor=tk.E)
    label.pack(side='left')
    frame.entry = tk.Entry(frame, width=size)
    frame.entry.pack(side='left')
    if validate_func:
        cmd = frame.entry.register(validate_func)
        frame.entry.config(validate='key')
        frame.entry.config(validatecommand=(cmd, '%P'))

    frame.pack(side='top', anchor=tk.W)
        
    return frame


class Application(tk.Frame):
    def __init__(self, master=None):
        super().__init__(master)
        self.master = master
        self.pack(fill=tk.BOTH)
        self.create_widgets()


    def create_widgets(self):

        self.page_orientation = create_choice(self, _('Page orientation'), _('portrait'),
                                              _('portrait'), _('landscape'))
        self.page_orientation.pack(side="top")

        self.page_format = create_choice(self, _('Page format'), 'A4', 'A4', 'A3')

        self.num_pages = create_input(self, _('Number of pages'), validate_page_num)
        self.num_pages.entry.insert(0, '1')

        self.img_layout = create_choice(self, _('Image layout'), _('grid'),
                                       _('grid'), _('random'))

        self.images_per_page = create_input(self, _('Images per page'), validate_page_num)
        self.images_per_page.entry.insert(0, '36')

        self.target_ratio = create_input(self, _('Target ratio (%)'), validate_percent)
        self.target_ratio.entry.insert(0, '20')

        self.target_img = create_input(self, _('Target image'), None, 50)
        self.target_img.entry.bind('<Button-1>', self.cb_choose_target_img)

        self.src_img_dir = create_input(self, _('Image directory'), None, 50)
        self.src_img_dir.entry.bind('<Button-1>', self.cb_choose_img_src_dir)
        self.src_img_dir.entry.insert(0, 'letters')

        self.instruction = create_input(self, _('Instruction'), None, 50)

        # add a separation
        tk.Frame(self, height=30).pack(side='top')

        # Buttons
        self.frame_buttons = tk.Frame(self)
        self.frame_buttons.pack(side='top', anchor=tk.E, padx=15)

        self.button_gen_pdf = tk.Button(self.frame_buttons, text=_('Generate PDF'),
                                        command=self.generate_pdf)
        self.button_gen_pdf.pack(side='left')

        self.button_gen_pdf = tk.Button(self.frame_buttons, text=_('Generate PDF and open'),
                                        command=self.generate_pdf_and_open)
        self.button_gen_pdf.pack(side='left')
        
        self.button_exit = tk.Button(self.frame_buttons, text=_('Exit'), command=self.exit)
        self.button_exit.pack(side='left')
        self.master.bind('<Control-q>', self.exit)

        # add a separation
        tk.Frame(self, height=15).pack(side='top')

        # Messages
        self.console = tk.Text(self)
        self.console.pack(side="top", fill=tk.BOTH, expand=1)



    def cb_choose_target_img(self, event):
        filepath = tk.filedialog.askopenfilename()
        if filepath:
            # set the path in the widget
            self.target_img.entry.delete(0, tk.END)
            self.target_img.entry.insert(0, filepath)


    def cb_choose_img_src_dir(self, event):
        directory = tk.filedialog.askdirectory()
        if directory:
            # set the path in the widget
            self.src_img_dir.entry.delete(0, tk.END)
            self.src_img_dir.entry.insert(0, directory)


    def exit(self, event=None):
        self.master.destroy()


    def collect_miximg_args(self):
        args = [get_miximg_exe()]
        args.append('--images-per-page')
        args.append(self.images_per_page.entry.get())
        args.append('--page-format')
        args.append(self.page_format.value.get())
        args.append('--page-orientation')
        args.append(self.page_orientation.value.get())
        if self.num_pages.entry.get():
            args.append('--pages')
            args.append(self.num_pages.entry.get())
        args.append('--layout')
        args.append(self.img_layout.value.get())
        if self.target_ratio.entry.get():
            args.append('--target-ratio')
            args.append(self.target_ratio.entry.get())
        if self.target_img.entry.get():
            args.append('--target')
            args.append(self.target_img.entry.get())
        if self.instruction.entry.get():
            args.append('--text')
            args.append(self.instruction.entry.get())
        args.append(self.src_img_dir.entry.get())

        return args


    def generate_pdf_and_open(self, event=None):
        (returncode, pdf_filepath) = self.generate_pdf(event)
        if returncode == 0:
            self.console.insert(tk.END, 'Opening PDF...')
            open_file_with_default_application(pdf_filepath)


    def generate_pdf(self, event=None):
        # ask for output file
        pdf_filepath = tk.filedialog.asksaveasfilename(filetypes=(('PDF', '*.pdf'),),
                                                 title=_('Choose a file name for the generated PDF'))
        if not pdf_filepath:
            self.console.insert(tk.END, _('cancelled')+'\n')
            return

        if pdf_filepath[-4:] != '.pdf':
            pdf_filepath += '.pdf'

        # run the 'miximg' program
        args = self.collect_miximg_args()
        args.append('--output')
        args.append(pdf_filepath)

        self.console.insert(tk.END, ' '.join(args) + '\n')
        self.console.update()

        p = subprocess.run(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # display the result in the console
        self.console.insert(tk.END, p.stdout)
        self.console.insert(tk.END, p.stderr)

        if p.returncode == 0:
            result = _('ok')
        else:
            result = _('error')

        self.console.insert(tk.END, result+'\n')

        return p.returncode, pdf_filepath


def get_miximg_exe():
    return './miximg'


def get_version():
    p = subprocess.run([get_miximg_exe(), '-V'], stdout=subprocess.PIPE)
    return p.stdout


def main():
    root = tk.Tk()
    miximg_version = get_version()
    root.title(miximg_version)
    app = Application(master=root)
    app.mainloop()


if __name__ == '__main__':
    main()
