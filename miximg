#! /usr/bin/env python3

import os
import sys
import argparse
import random
import fpdf
import PIL
import math

VERSION = '1.2'
 
# page layout
# +---------------------------------+
# |  .............................  |
# |   text...                       |
# |        [target image]           |
# |                                 |
# |                                 |
# |  .............................  |
# |  .                           .  |
# |  .                           .  |
# |  .                           .  |
# |  .                           .  |
# |  .   I M A G E S             .  |
# |  .                           .  |
# |  .                           .  |
# |  .                           .  |
# |  .............................  |
# |                                 |
# +---------------------------------+

# Size unit is millimeter
MARGIN_LEFT = 10
MARGIN_RIGHT = MARGIN_LEFT
MARGIN_TOP = 10
MARGIN_BOTTOM = MARGIN_TOP
HEADER_TARGET_X = 100
OFFSET_Y_TEXT = MARGIN_TOP
HEIGHT_TEXT = 20
OFFSET_Y_TARGET_IMG = MARGIN_TOP + HEIGHT_TEXT
HEIGHT_TARGET_IMG = 40
HEIGHT_HEADER = HEIGHT_TEXT + HEIGHT_TARGET_IMG
MARGIN_IMGS_TOP = MARGIN_TOP + HEIGHT_HEADER + 10
PAGE_FORMAT_PORTRAIT = 'portrait'
PAGE_FORMAT_LANDSCAPE = 'landscape'
PAGE_SIZES_MM = { 'A4': { PAGE_FORMAT_PORTRAIT: (210, 297),
                          PAGE_FORMAT_LANDSCAPE: (297, 210) },
                  'A3': { PAGE_FORMAT_PORTRAIT: (297, 420),
                          PAGE_FORMAT_LANDSCAPE: (420, 297) }
                 }
# Separation space between images
PADDING_IMG_Y = 10
PADDING_IMG_X = 10


def log(*args):
    msg = ''
    for arg in args:
        if len(msg) != 0: msg += ' '
        msg += '%s' % (arg)
    print(msg)


def parse_command_line():
    parser = argparse.ArgumentParser(description=main.__doc__, prog='miximg')
    parser.add_argument('files', nargs='+', help='source image files or directories')
    parser.add_argument('--images-per-page', type=int, help='Number of images per page', default=36)
    parser.add_argument('--layout', choices=['grid', 'random'], help='Layout of the images', default='grid')
    parser.add_argument('-o', '--output', help='Name of the generated PDF', default='output.pdf')
    parser.add_argument('--pages', type=int, help='Number of pages', default=1)
    parser.add_argument('--page-format', choices=['A3', 'A4'], help='Page format (A3 or A4)', default='A4')
    parser.add_argument('--page-orientation', choices=[PAGE_FORMAT_PORTRAIT, PAGE_FORMAT_LANDSCAPE],
                        help='Orientation of the page (portrait or landscape)', default=PAGE_FORMAT_PORTRAIT)
    parser.add_argument('--target', help='Select a target (by default take a random)')
    parser.add_argument('--target-ratio', type=int, help='Ratio (%%) of occurrence of the target image', default=20)
    parser.add_argument('--text', help='Header text', default='')
    parser.add_argument('-v', '--verbose', action='store_true', help='Be more verbose')
    parser.add_argument('-V', '--version',
                        help='Print version and exit', action='version',
                        version='%(prog)s ' + VERSION)

    args = parser.parse_args()
    return args


def get_src_files(items):
    result = []
    for item in items:
        if os.path.isdir(item):
            for r, d, f in os.walk(item):
                subfiles = [os.path.join(r, subf) for subf in f]
                result += subfiles
        else:
            result.append(item)

    return set(result) # remove duplicates


def init_pdf(orientation, page_format):
    pdf = fpdf.FPDF(orientation=orientation, unit='mm', format=page_format)
    pdf.set_font('Arial', size=HEIGHT_TEXT)
    return pdf


def set_target_img(pdf, img, page_orientation, page_format):
    """Print the target image in the header
    """
    page_width, page_height = PAGE_SIZES_MM[page_format][page_orientation]
    max_box_width = page_width / 2
    # set the size of the box in which will be displayed the image
    i = Image(img)
    w, h = i.aspect_ratio
    h_box = HEIGHT_TARGET_IMG
    w_box = h_box / h
    x = page_width / 2 - w_box / 2
    if w_box > max_box_width:
        # set the width
        pdf.image(img, x=x, y=OFFSET_Y_TARGET_IMG, w=max_box_width)
    else:
        pdf.image(img, x=x, y=OFFSET_Y_TARGET_IMG, h=h_box)


def set_text(pdf, text, page_orientation, page_format):
    """Print the text in the header
    """
    pdf.set_x(MARGIN_LEFT)
    pdf.set_y(MARGIN_TOP)
    page_width, page_height = PAGE_SIZES_MM[page_format][page_orientation]
    text_box_width = page_width - MARGIN_LEFT - MARGIN_RIGHT
    pdf.multi_cell(text_box_width, HEIGHT_TEXT, txt=text, align='L')


def generate_grid(pdf, imgs, one_img_w, one_img_h, n_horizontal, page_format, page_orientation):
    """Place the images on a grid
    """
    # display on a grid
    x0 = MARGIN_LEFT
    y0 = MARGIN_IMGS_TOP
    y = y0
    page_width, page_height = PAGE_SIZES_MM[page_format][page_orientation]

    while len(imgs):
        # take a whole line (n_horizontal items)
        imgs_on_line = imgs[:n_horizontal]
        imgs = imgs[n_horizontal:]
        # compute width of line
        w_line = one_img_w + (len(imgs_on_line)-1) * (one_img_w + PADDING_IMG_X)
        # compute the x offset to center the images on the page
        x_line = x0 + (page_width - MARGIN_LEFT - MARGIN_RIGHT - w_line)/2
        x = x_line

        for img in imgs_on_line:
            w, h = img.aspect_ratio
            if w == 1:
                # fix the width
                pdf.image(img.filename, x=x, y=y, w=one_img_w)
            else:
                # fix the height
                # center the image horizontally in its box
                x_centered = x + (one_img_w - w*one_img_w)/2
                pdf.image(img.filename, x=x_centered, y=y, h=one_img_h)

            x += one_img_w + PADDING_IMG_X

        # end of line
        # go to next line
        y += one_img_h + PADDING_IMG_Y


def is_in_box(x0, y0, w0, h0, x, y):
    if x0 <= x <= x0+w0:
        if y0 <= y <= y0+h0:
            return True
    return False


def check_img_conflict(already_placed, one_img_w, one_img_h, x, y):
    """Check if an image at (x, y) is in touch with already placed images)
    """
    for x0, y0 in already_placed:
        # check if at least one edge of the rectabgle is in the already placed rectangle
        if is_in_box(x0, y0, one_img_w, one_img_h, x, y): return True
        if is_in_box(x0, y0, one_img_w, one_img_h, x+one_img_w, y): return True
        if is_in_box(x0, y0, one_img_w, one_img_h, x+one_img_w, y+one_img_h): return True
        if is_in_box(x0, y0, one_img_w, one_img_h, x, y+one_img_h): return True

    return False


def generate_random(pdf, imgs, one_img_w, one_img_h, page_format, page_orientation):
    """Place the images randomly
    """
    already_placed = []
    img_box_w, img_box_h = get_image_box_size(page_format, page_orientation)

    # The retry counter is a way to prevent an infinite loop
    # if the arrangement of already placed images does not let enough space
    # for remaining images (or if the random sequence is very unlucky).
    # A test with retry_counter=100 shows that sometimes it succeeds, and sometimes
    # it fails.
    # I choose the empirical value 10000, that should be enough for most cases.
    retry_counter = 10000

    # Reduce the size slightly
    one_img_w /= 1.2
    one_img_h /= 1.2

    while len(imgs):

        x = random.uniform(0, img_box_w - one_img_w)
        y = random.uniform(0, img_box_h - one_img_h)
        # make some rounding to reduce the possibilities of placement
        x = int(x/4)*4
        y = int(y/4)*4
        # translate into the final box
        x += MARGIN_LEFT
        y += MARGIN_IMGS_TOP
        # check if this place is in conflict with an aleady placed image
        is_conflict = check_img_conflict(already_placed, one_img_w*1.2, one_img_h*1.2, x, y)
        if is_conflict:
            # retry another random placement
            retry_counter -= 1
            if retry_counter <= 0:
                log('Infinite loop in random placement. Abort')
                sys.exit(1)

            continue

        # ok, the place is clear, set the image here
        already_placed.append((x, y))
        img = imgs.pop(0)
        w, h = img.aspect_ratio
        if w == 1: pdf.image(img.filename, x=x, y=y, w=one_img_w) # fix the width
        else:      pdf.image(img.filename, x=x, y=y, h=one_img_h) # fix the height


def chose_target_item(file_set):
    files = list(file_set)
    return random.choice(files)


def compute_random_list(item_set, size, target_item, target_ratio):
    """Create a list of given size, where the target item is present with the given ratio (%)
    """

    if len(item_set) <= 1:
        raise Exception('len(item_set) <= 1')

    items = list(item_set)

    # First initialize the result with the number of target items
    n_target_item = size * target_ratio // 100
    if n_target_item == 0: n_target_item = 1
    if n_target_item > 100: n_target_item = 100
    result = [ target_item ] * n_target_item

    # Now complete the list with the other items
    while len(result) < size:
        random_item = random.choice(items)
        if random_item == target_item: continue # do not take this one
        result.append(random_item)

    random.shuffle(result)

    return result


def get_aspect_ratio(image_file):
    """Return a tuple (WIDTH, HEIGHT) giving the aspect ratio of the image

    If the image width is more then its height, then WIDTH=1 and HEIGHT <= 1.
    If the image height is more then its width, then HEIGHT=1 and WIDTH <= 1.
    """

    img = PIL.Image.open(image_file)
    width, height = img.size
    if width >= height:
        w = 1
        h = height / width
    else:
        h = 1
        w = width / height

    return w, h


class Image:
    def __init__(self, filename):
        self.filename = filename
        self.aspect_ratio = get_aspect_ratio(filename)


def get_image_box_size(page_format, page_orientation):
    """Get the width an height of the area of the images
    """
    page_width, page_height = PAGE_SIZES_MM[page_format][page_orientation]
    image_box_width = page_width - MARGIN_RIGHT - MARGIN_LEFT
    image_box_height = page_height - MARGIN_BOTTOM - MARGIN_IMGS_TOP
    return image_box_width, image_box_height


def compute_img_size(images, images_per_page, page_format, page_orientation):
    """Compute the size that must have the images to fit in the given page size

    Images are to be displayed in squares.
    """
    if len(images) == 0:
        raise Exception('Empty file list')

    w_ref, h_ref = 0, 0
    for img in images:
        w, h = img.aspect_ratio
        if w > w_ref: w_ref = w
        if h > h_ref: h_ref = h

    img_aspect_ratio = w_ref / h_ref
    # now compute the max size
    image_box_width, image_box_height = get_image_box_size(page_format, page_orientation)
    img_box_surface = image_box_width * image_box_height
    one_img_surface = img_box_surface / images_per_page
    one_img_w = math.sqrt(one_img_surface * img_aspect_ratio) - PADDING_IMG_X
    one_img_h = math.sqrt(one_img_surface / img_aspect_ratio) - PADDING_IMG_Y

    # reduce size by 15% as the distribution on the surface is not optimal (some space is wasted)
    one_img_w *= 0.85
    one_img_h *= 0.85

    n_horizontal = image_box_width / (one_img_w + PADDING_IMG_X)
    n_horizontal = int(n_horizontal)
    if n_horizontal == 0:
        raise Exception('n_horizontal is zero')

    return one_img_w, one_img_h, n_horizontal


def convert_to_objects(files):
    result = []
    for f in files:
        img = Image(f)
        result.append(img)

    return result


def main():

    args = parse_command_line()

    src_files = get_src_files(args.files)

    pdf = init_pdf(args.page_orientation, args.page_format)
    for page in range(args.pages):

        pdf.add_page()

        if args.target:
            target_img = args.target
        else:
            target_img = chose_target_item(src_files)

        files = compute_random_list(src_files, args.images_per_page, target_img, args.target_ratio)

        imgs = convert_to_objects(files)

        one_img_w, one_img_h, n_horizontal = compute_img_size(imgs, args.images_per_page,
                                                              args.page_format, args.page_orientation)

        set_target_img(pdf, target_img, args.page_orientation, args.page_format)
        set_text(pdf, args.text, args.page_orientation, args.page_format)

        if args.layout == 'grid':
            generate_grid(pdf, imgs, one_img_w, one_img_h, n_horizontal, args.page_format, args.page_orientation)
        else:
            generate_random(pdf, imgs, one_img_w, one_img_h, args.page_format, args.page_orientation)

    pdf.output(args.output)

 
if __name__ == '__main__':
    main()
